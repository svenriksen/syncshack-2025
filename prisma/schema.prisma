// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TreeType {
  pine
  bamboo
  maple
  bonsai
  sakura
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())

  accounts      Account[]
  sessions      Session[]

  // MVP relations
  profile       Profile?
  trips         Trip[]
  gardens       Garden[]
  weeklyEntries LeaderboardWeek[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =====================
// MVP Models
// =====================

model Profile {
  userId              String  @id
  user                User    @relation(fields: [userId], references: [id])
  bio                 String?
  location            String?
  totalCoins          Int     @default(0)
  currentStreak       Int     @default(0)
  longestStreak       Int     @default(0)
  treesPlantedVirtual Int     @default(0)
  treesPlantedReal    Int     @default(0)
  lastActiveDate      DateTime?
}

model Trip {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  startLat     Float
  startLng     Float
  endLat       Float
  endLng       Float
  distanceM    Int      @default(0)
  durationS    Int      @default(0)
  modeGuess    String   @default("unknown")
  valid        Boolean  @default(false)
  coinsAwarded Int      @default(0)
  startedAt    DateTime
  endedAt      DateTime?
  polyline     String   // JSON of {lat,lng,t,s}
  createdAt    DateTime @default(now())
  flags        AuditFlag[]

  @@index([userId, startedAt])
}

model AuditFlag {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id])
  reason    String
  createdAt DateTime @default(now())

  @@index([tripId, createdAt])
}


model Garden {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      TreeType
  x         Int
  y         Int
  status    String   @default("alive")
  plantedAt DateTime @default(now())

  @@unique([userId, x, y])
  @@index([userId])
}

model LeaderboardWeek {
  id            String   @id @default(cuid())
  weekStartDate DateTime
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  coins         Int      @default(0)

  @@unique([weekStartDate, userId])
  @@index([weekStartDate, coins])
}
