// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  Visit         Visit[]
  PointLedger   PointLedger[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// prisma/schema.prisma
model Place {
  id         String   @id @default(cuid())
  providerId String   @unique
  name       String
  address    String
  lat        Float
  lng        Float
  createdAt  DateTime @default(now())
  visits     Visit[]
}

model Visit {
  id            String      @id @default(cuid())
  userId        String
  placeId       String
  status        VisitStatus @default(PENDING) // PENDING, CHECKED_IN
  startedAt     DateTime    @default(now())
  checkedInAt   DateTime?
  checkinLat    Float?
  checkinLng    Float?
  pointsAwarded Int         @default(0)

  user        User          @relation(fields: [userId], references: [id])
  place       Place         @relation(fields: [placeId], references: [id])
  PointLedger PointLedger[]

  @@index([userId, placeId, status, checkedInAt])
}

enum VisitStatus {
  PENDING
  CHECKED_IN
}

model PointLedger {
  id        String   @id @default(cuid())
  userId    String
  visitId   String?
  delta     Int
  reason    String // CHECKIN, TREE_REWARD, ADJUST
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id])
  visit Visit? @relation(fields: [visitId], references: [id])

  @@index([userId, createdAt])
}
